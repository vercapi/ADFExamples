#+TITLE: Exception Handling

This example application is for figuring out how ADF handles different exceptions on a range of events.
Investigate what needs to be done at minimum to ensure *all* exceptions are logged and a user friendly message is shown.
And how and where we can intervene to display other, more functional messages to the user.

The test results are from ADF 12.2.1.0.0 

Good starting point for exception handling: [[http://www.slideshare.net/chriscmuir/adf-architecture-development-error-handling][Architecture TV - Error handling]]


* Exception types

  As stated in this [[https://blogs.oracle.com/jdevotnharvest/entry/displaying_exceptions_thrown_or_catched][OTN blog]] it is best to throw JboExceptions as these are handled best by the layers above.
  
** JboException based exceptions

   Generated by JobsVO and Jobs Entity:
   - Create, remove and doDML methods in the JobsImpl.java
   - failOnJobRow method in JobsVORowImpl
   - failOnJobVO method in JobsVoImpl
   - throwCustomJboException method in ExceptionAMImpl
   - setCountries on the Countries entity
   - setRegionId on the CountriesVO


   JboBased exceptions give the message set in the JboException on the UI. Behavior is as intended.
   Only customization is needed for JboExceptions thrown in the TF but this seems a smart way to do it.
   
** TODO Non JboException runtime exceptions

  Generated by RegionsVO and Regions entity:
  - Create, remove and doDML methods in the RegionsImpl.java
  - failOnRegionsRow method in RegionsVORowImpl
  - failOnRegionsVO method in RegionsVoImpl
  - throwCustomRuntimeException method in ExceptionAMImpl

  Results:

** TODO Checked exceptions

   Checked exceptions need to be handled and logged. What recommendations can we make to handle these

*** In the Binings
*** In the ViewController
** TODO Custom ORA exceptions

   This trigger will throw a custom exception
   #+BEGIN_SRC sql
     create or replace trigger bi_job_history
     before insert on job_history
     declare
        custom_exception EXCEPTION;
        PRAGMA EXCEPTION_INIT(custom_exception, -20001);
     begin
       raise  custom_exception;
     end bi_job_history;
   #+END_SRC

   The JobHistoryVO will generate this error when inserting a new record that passes the validations


* Exceptions sources in bc
  
  The origin of exceptions thrown in business components can be roughly categorized as follows.
  This doesn't affect behavior but there are different ways to intervene with the exceptions to get the best results.
  
** TODO Execute Query

   Implemented in the executeQueryForCollection of EmployeesJboVO and EmployeesRTVO.

** TODO DML operations
   
   Generated by:
   - Create, remove and doDML methods in the JobsImpl.java (jbo)
   - Create, remove and doDML methods in the RegionsImpl.java (runtime)

** TODO Java Client interface

   Generated by client methods in JobsVO (jbo) and RegionsVO (runtime)

** TODO Attributes

   Generated by:
   - get/setCountries on the Countries entity (jbo)
   - get/setRegionId on the CountriesVORowImpl (jbo)
   - set/getStreetAddress on the Locations entity (runtime)
   - set/getPostalCode on the LocationsVORowImpl (runtime)

** TODO Validations

* Exception behavior in faces

** ActionListener
   
   Action shows the message from the JboException.

   No navigation happened but no navigation was intended.
   
** Action
   
   ActionListener shows the mesage from the JboEsception, no navigation occurs so the action is not executed when action listener fails.

** Method call in TF

   Without any exception handler these will give application exceptions. 

   Implementation of an exception handler is needed.
   - A specific one if you really want something to happen in case of an error
   - Add a generic one that forwards the user friendly jbo message to the end user

*** TODO Generic exception handler

   This is the template that can be included to use a generic exception handler [[ViewController/public_html/WEB-INF/templates/exception-fragment-template.xml][exception-fragment-template.btf]]
   You can enable/disable the "Exception handler" flag in this file to see the standard results.

   The exception handler has a default outcome you can use on your main taskflow to redirect after errors.
   This allows combination of the default 'messaging behavior' and some custom implementation.

   The code for the generic exception handler: [[ViewController/src/be/contribute/exceptionhandling/view/exceptions/jboexceptionsbtf/TaskflowExceptionHandler.java][TaskflowExceptionHandler.java]]
   
   Issues with this:
   - When do we log this? currently there is only the message for the user.
   
** TODO Via java

* Translations
* Impact of exception handlers

** TODO Taskflow exception handler
** TODO DataControl error handler
** TODO View error handler
** TODO Servlet Container

* Logging
