package be.contribute.exceptionhandling.model.entities;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 21 10:57:50 CET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JobHistoryImpl
	extends EntityImpl
{
	/**
	 * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
	 */
	public enum AttributesEnum
	{
		EmployeeId,
		StartDate,
		EndDate,
		JobId,
		DepartmentId,
		Jobs;
		private static AttributesEnum[] vals = null;
		private static final int firstIndex = 0;

		public int index()
		{
			return AttributesEnum.firstIndex() + ordinal();
		}

		public static final int firstIndex()
		{
			return firstIndex;
		}

		public static int count()
		{
			return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
		}

		public static final AttributesEnum[] staticValues()
		{
			if (vals == null)
			{
				vals = AttributesEnum.values();
			}
			return vals;
		}
	}
	public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
	public static final int STARTDATE = AttributesEnum.StartDate.index();
	public static final int ENDDATE = AttributesEnum.EndDate.index();
	public static final int JOBID = AttributesEnum.JobId.index();
	public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
	public static final int JOBS = AttributesEnum.Jobs.index();

	/**
	 * This is the default constructor (do not remove).
	 */
	public JobHistoryImpl()
	{
	}

	/**
	 * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
	 * @return the value of EmployeeId
	 */
	public Integer getEmployeeId()
	{
		return (Integer)getAttributeInternal(EMPLOYEEID);
	}

	/**
	 * Sets <code>value</code> as the attribute value for EmployeeId.
	 * @param value value to set the EmployeeId
	 */
	public void setEmployeeId(Integer value)
	{
		setAttributeInternal(EMPLOYEEID, value);
	}

	/**
	 * Gets the attribute value for StartDate, using the alias name StartDate.
	 * @return the value of StartDate
	 */
	public Timestamp getStartDate()
	{
		return (Timestamp)getAttributeInternal(STARTDATE);
	}

	/**
	 * Sets <code>value</code> as the attribute value for StartDate.
	 * @param value value to set the StartDate
	 */
	public void setStartDate(Timestamp value)
	{
		setAttributeInternal(STARTDATE, value);
	}

	/**
	 * Gets the attribute value for EndDate, using the alias name EndDate.
	 * @return the value of EndDate
	 */
	public Timestamp getEndDate()
	{
		return (Timestamp)getAttributeInternal(ENDDATE);
	}

	/**
	 * Sets <code>value</code> as the attribute value for EndDate.
	 * @param value value to set the EndDate
	 */
	public void setEndDate(Timestamp value)
	{
		setAttributeInternal(ENDDATE, value);
	}

	/**
	 * Gets the attribute value for JobId, using the alias name JobId.
	 * @return the value of JobId
	 */
	public String getJobId()
	{
		return (String)getAttributeInternal(JOBID);
	}

	/**
	 * Sets <code>value</code> as the attribute value for JobId.
	 * @param value value to set the JobId
	 */
	public void setJobId(String value)
	{
		setAttributeInternal(JOBID, value);
	}

	/**
	 * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
	 * @return the value of DepartmentId
	 */
	public Integer getDepartmentId()
	{
		return (Integer)getAttributeInternal(DEPARTMENTID);
	}

	/**
	 * Sets <code>value</code> as the attribute value for DepartmentId.
	 * @param value value to set the DepartmentId
	 */
	public void setDepartmentId(Integer value)
	{
		setAttributeInternal(DEPARTMENTID, value);
	}

	/**
	 * @return the associated entity JobsImpl.
	 */
	public JobsImpl getJobs()
	{
		return (JobsImpl)getAttributeInternal(JOBS);
	}

	/**
	 * Sets <code>value</code> as the associated entity JobsImpl.
	 */
	public void setJobs(JobsImpl value)
	{
		setAttributeInternal(JOBS, value);
	}

	/**
	 * @param employeeId key constituent
	 * @param startDate key constituent

	 * @return a Key object based on given key constituents.
	 */
	public static Key createPrimaryKey(Integer employeeId, Timestamp startDate)
	{
		return new Key(new Object[] { employeeId, startDate });
	}

	/**
	 * @return the definition object for this instance class.
	 */
	public static synchronized EntityDefImpl getDefinitionObject()
	{
		return EntityDefImpl.findDefObject("be.contribute.exceptionhandling.model.entities.JobHistory");
	}

	/**
	 * Add attribute defaulting logic in this method.
	 * @param attributeList list of attribute names/values to initialize the row
	 */
	protected void create(AttributeList attributeList)
	{
		super.create(attributeList);
	}

	/**
	 * Add entity remove logic in this method.
	 */
	public void remove()
	{
		super.remove();
	}

	/**
	 * Add locking logic here.
	 */
	public void lock()
	{
		super.lock();
	}

	/**
	 * Custom DML update/insert/delete logic here.
	 * @param operation the operation type
	 * @param e the transaction event
	 */
	protected void doDML(int operation, TransactionEvent e)
	{
		super.doDML(operation, e);
	}
}

