package be.contribute.exceptionhandling.model.entities;

import be.contribute.exceptionhandling.model.exceptions.CustomRuntimeException;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 21 10:30:42 CET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegionsImpl
	extends EntityImpl
{
	/**
	 * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
	 */
	public enum AttributesEnum
	{
		RegionId,
		RegionName,
		Countries;
		private static AttributesEnum[] vals = null;
		private static final int firstIndex = 0;

		public int index()
		{
			return AttributesEnum.firstIndex() + ordinal();
		}

		public static final int firstIndex()
		{
			return firstIndex;
		}

		public static int count()
		{
			return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
		}

		public static final AttributesEnum[] staticValues()
		{
			if (vals == null)
			{
				vals = AttributesEnum.values();
			}
			return vals;
		}
	}

	public static final int REGIONID = AttributesEnum.RegionId.index();
	public static final int REGIONNAME = AttributesEnum.RegionName.index();
	public static final int COUNTRIES = AttributesEnum.Countries.index();

	/**
	 * This is the default constructor (do not remove).
	 */
	public RegionsImpl()
	{
	}

	/**
	 * @return the definition object for this instance class.
	 */
	public static synchronized EntityDefImpl getDefinitionObject()
	{
		return EntityDefImpl.findDefObject("be.contribute.exceptionhandling.model.entities.Regions");
	}

	/**
	 * Gets the attribute value for RegionId, using the alias name RegionId.
	 * @return the value of RegionId
	 */
	public BigDecimal getRegionId()
	{
		return (BigDecimal)getAttributeInternal(REGIONID);
	}

	/**
	 * Sets <code>value</code> as the attribute value for RegionId.
	 * @param value value to set the RegionId
	 */
	public void setRegionId(BigDecimal value)
	{
		setAttributeInternal(REGIONID, value);
	}

	/**
	 * Gets the attribute value for RegionName, using the alias name RegionName.
	 * @return the value of RegionName
	 */
	public String getRegionName()
	{
		return (String)getAttributeInternal(REGIONNAME);
	}

	/**
	 * Sets <code>value</code> as the attribute value for RegionName.
	 * @param value value to set the RegionName
	 */
	public void setRegionName(String value)
	{
		setAttributeInternal(REGIONNAME, value);
	}

	/**
	 * @return the associated entity oracle.jbo.RowIterator.
	 */
	public RowIterator getCountries()
	{
		return (RowIterator)getAttributeInternal(COUNTRIES);
	}


	/**
	 * @param regionId key constituent

	 * @return a Key object based on given key constituents.
	 */
	public static Key createPrimaryKey(BigDecimal regionId)
	{
		return new Key(new Object[] { regionId });
	}

	/**
	 * Add attribute defaulting logic in this method.
	 * @param attributeList list of attribute names/values to initialize the row
	 */
	protected void create(AttributeList attributeList)
	{
		throw new CustomRuntimeException("Cannot create a region");
		//super.create(attributeList);
	}

	/**
	 * Add entity remove logic in this method.
	 */
	public void remove()
	{
	   throw new CustomRuntimeException("Cannot remove a region");
		//super.remove();
	}

	/**
	 * Add locking logic here.
	 */
	public void lock()
	{
		super.lock();
	}

	/**
	 * Custom DML update/insert/delete logic here.
	 * @param operation the operation type
	 * @param e the transaction event
	 */
	protected void doDML(int operation, TransactionEvent e)
	{
	   throw new CustomRuntimeException("Cannot update a region");
		//super.doDML(operation, e);
	}
}

